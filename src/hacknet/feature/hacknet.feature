Feature: Manage a Hacknet network
  The goal is to manage the Hacknet network to make profits. The management rules aim to balance investments to increase
  Hacknet profitability over time and the absolute profitability itself.


  Rule: Hacknet profitability should be around 200%
  In a stable operational run, the Hacknet network should generate at least the same amount in profit as the total
  investment amount in the network.

    @cornerCase
    Scenario: To kick-off the network, the first investment is allowed to generate a negative performance

      Given the Hacknet network contains no node
      * the Hacknet manager performance is 0
      When the Hacknet managers requests to upgrade
      Then the Hacknet manager performance is negative

    @happyPath
    Scenario: The amount of profits generated by the network should be at least twice the value of the network

      Given the Hacknet network is valued at <hacknetValue>
      * next upgrade cost <upgradeCost>
      When the Hacknet managers requests to upgrade
      Then the Hacknet manager performance should be at least 200% plus the upgrade costs


  Rule: Improve Hacknet profitability
  Trigger a Hacknet profitability improvement once benefits and upgrade costs are covered
  Upgrades should be done only through profits generated by the Hacknet network
  Only exception allowed is for the first Hacknet node

    @happyPath
    Scenario Outline: Improve the network once the previous investment is profitable and the additional benefits are able to pay for the next upgrade

      Given the Hacknet network is valued as <hacknetValue>
      * the next upgrade costs <nextUpgradeCost>
      * the Hacknet network had generated an absolut <profitAmount> profits
      When the Hacknet managers requests to upgrade
      Then the upgrade is <upgradePermission>
      * the upgrade status is <upgradeStatus>

      Examples:
        | hacknetValue | nextUpgradeCost | profitAmount | upgradePermission | upgradeStatus           |
        | 100000       | 10000           | 109999       | Denied            | Paying previous upgrade |
        | 100000       | 10000           | 110000       | Granted           | Green                   |
        | 100000       | 10000           | 110001       | Granted           | Green                   |

    @cornerCase
    Scenario Outline: If there is no Hacknet node, create one with external investment

      Given the Hacknet network contains no node
      * the total cash amount is <cashAmount>
      * the cost of a new node is <newNodeCost>
      When the Hacknet managers requests to upgrade
      Then the upgrade is <permission>
      * the Hacknet manager status is <hacknetManagerStatus>

      Examples:
        | cashAmount | newNodeCost | permission | hacknetManagerStatus |
        | 1000       | 999         | granted    | green                |
        | 1000       | 1000        | granted    | green                |
        | 1000       | 1001        | denied     | Waiting for cash     |

    @happyPath
    Scenario Outline: If there is not enough money in the player cash account, wait for it

      Given the total cash available is <totalCashAvailable>
      * the next upgrade costs <nextUpgradeCost>
      When the Hacknet managers requests to upgrade
      Then the upgrade is <upgradePermission>
      * the upgrade status is <hacknetManagerStatus>

      Examples:
        | totalCashAvailable | nextUpgradeCost | upgradePermission | hacknetManagerStatus |
        | 100000             | 99999           | granted           | Green                |
        | 100000             | 100000          | granted           | Green                |
        | 100000             | 100001          | denied            | Waiting for cash     |


  Rule: Improvement trigger rule can be bypassed
  if the investment doesn't impact too much the actual cash of the player
  To accelerate the development of the network, the profitability threshold rule can be bypassed if this action doesn't
  impact too much the actual cash of the player. Not too much mean no higher than 1% of the player total available cash.

    @happyPath
    Scenario Outline: If improvement costs have nearly no impact on available cash, then invest
    If improvement costs are lower that 1% of the player cash account, then upgrade whatever the profitability threshold

      Given the player has <totalCashAvailable> total cash available
      * the next upgrade costs is <upgradeCost>
      * the profitability has not been reached
      When the Hacknet manager requests the upgrade
      Then the upgrade is <upgradePermission>
      * the upgrade status is <hacknetManagerStatus>

      Examples:
        | totalCashAvailable | upgradeCost | upgradePermission | hacknetManagerStatus    |
        | 100000             | 1001        | denied            | Paying previous upgrade |
        | 100000             | 1000        | granted           | green                   |
        | 100000             | 999         | granted           | green                   |


  Rule: The improvement action should be done to maximise the return on investment

    @happyPath
    Scenario Outline: If buying a new node is more profitable than upgrading any component, then buy it

      Given a node with the following characteristics
        | component | productionIncrease  | upgradeCost    |
        | level     | <levelProdIncrease> | <levelUpgCost> |
        | ram       | <ramProdIncrease>   | <ramUpgCost>   |
        | core      | <coreProdIncrease>  | <coreUpgCost>  |
      * the cost to buy a new node is <newNodeCost>
      * the production of a new node is <newNodeProd>
      When the Hacknet managers selects the next upgrade
      Then its choice is <nextUpgrade>

      Examples:
        | levelProdIncrease | levelUpgCost | ramProdIncrease | ramUpgCost | coreProdIncrease | coreUpgCost | newNodeProd | newNodeCost | nextUpgrade |
        | 100               | 8            | 100             | 4          | 100              | 2           | 100         | 1           | node        |
        | 100               | 8            | 100             | 4          | 100              | 1           | 100         | 1           | core        |
        | 100               | 8            | 100             | 4          | 100              | 1           | 200         | 2           | Core        |

    @happyPath
    Scenario Outline: Select the more profitable component to upgrade
    By most profitable, this means the upgrade that has the most important profitability increase while costing the less.

      Given a node with the following characteristics
        | component | productionIncrease  | upgradeCost    |
        | level     | <levelProdIncrease> | <levelUpgCost> |
        | ram       | <ramProdIncrease>   | <ramUpgCost>   |
        | core      | <coreProdIncrease>  | <coreUpgCost>  |
      When the Hacknet managers selects the next upgrade
      Then its choice is <nextUpgrade>

      Examples:
        | levelProdIncrease | levelUpgCost | ramProdIncrease | ramUpgCost | coreProdIncrease | coreUpgCost | nextUpgrade |
        | 100               | 4            | 100             | 2          | 100              | 1           | core        |
        | 100               | 4            | 100             | 1          | 100              | 2           | ram         |
        | 100               | 1            | 100             | 2          | 100              | 4           | level       |
        | 100               | 1            | 200             | 2          | 100              | 4           | level       |

